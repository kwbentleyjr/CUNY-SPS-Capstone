# -*- coding: utf-8 -*-
"""Amazon Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19W_K2QPhHEngRbbrlwu5tO5LAknNzvoO
"""

# Commented out IPython magic to ensure Python compatibility.
# import libraries 
import pandas as pd # Import Pandas for data manipulation using dataframes
import numpy as np # Import Numpy for data statistical analysis 
import matplotlib.pyplot as plt # Import matplotlib for data visualisation
import seaborn as sns # Statistical data visualization
# %matplotlib inline

df_alexa = pd.read_csv('https://raw.githubusercontent.com/kwbentleyjr/CUNY-SPS/main/IS499/amazon_alexa.tsv', sep='\t')

df_alexa

sns.countplot(x = df_alexa['feedback'], label='count')

sns.countplot(x = 'rating', data = df_alexa)

plt.figure(figsize = (40,15))
sns.set(font_scale=3)
plt.xticks(rotation=90)
sns.barplot(x = 'variation', y='rating', data=df_alexa, palette = 'deep')

df_alexa = df_alexa.drop(['date', 'rating'],axis=1)

df_alexa

variation_dummies = pd.get_dummies(df_alexa['variation'], drop_first = True)

variation_dummies

df_alexa.drop(['variation'], axis=1, inplace=True)

df_alexa

df_alexa = pd.concat([df_alexa, variation_dummies], axis=1)

df_alexa

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
alexa_countvectorizer = vectorizer.fit_transform(df_alexa['verified_reviews'])

alexa_countvectorizer.shape

type(alexa_countvectorizer)

print(vectorizer.get_feature_names())

print(alexa_countvectorizer.toarray())

df_alexa.drop(['verified_reviews'], axis=1, inplace=True)
reviews = pd.DataFrame(alexa_countvectorizer.toarray())

df_alexa = pd.concat([df_alexa, reviews], axis=1)

df_alexa

X = df_alexa.drop(['feedback'],axis=1)

X = pd.DataFrame(alexa_countvectorizer.toarray())

X

y = df_alexa['feedback']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=5)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

from sklearn.metrics import classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier

randomforest_classifier = RandomForestClassifier(n_estimators = 100, criterion = 'entropy')
randomforest_classifier.fit(X_train, y_train)

y_predict_train = randomforest_classifier.predict(X_train)
cm = confusion_matrix(y_train, y_predict_train)

print(classification_report(y_train, y_predict_train))

y_predict = randomforest_classifier.predict(X_test)
cm = confusion_matrix(y_test, y_predict)

print(classification_report(y_test, y_predict))
